# --- „É©„Ç§„Éñ„É©„É™ ---
import streamlit as st
import pandas as pd
import numpy as np
import requests
from datetime import datetime, timedelta

# --- API„Ç≠„Éº„ÅÆÊåáÂÆö ---
API_KEY = st.secrets["API_KEY"]  # „Çª„Ç≠„É•„Ç¢„Å´ÁÆ°ÁêÜ

# --- „É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ ---
st.title("FX„Éà„É¨„Éº„ÉâÂàÜÊûê")

symbol = st.selectbox("ÈÄöË≤®„Éö„Ç¢„ÇíÈÅ∏Êäû", ["USD/JPY", "EUR/USD", "GBP/JPY", "AUD/USD"], index=2)
style = st.selectbox("„Éà„É¨„Éº„Éâ„Çπ„Çø„Ç§„É´„ÇíÈÅ∏Êäû", ["„Çπ„Ç§„É≥„Ç∞", "„Éá„Ç§„Éà„É¨„Éº„Éâ", "„Çπ„Ç≠„É£„É´„Éî„É≥„Ç∞"], index=0)

# --- „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ ---
def get_pip_unit(symbol):
    return 0.01 if "JPY" in symbol else 0.0001

def fetch_data(symbol, interval):
    url = f"https://api.twelvedata.com/time_series?symbol={symbol}&interval={interval}&outputsize=150&apikey={API_KEY}"
    r = requests.get(url)
    data = r.json()
    if "values" not in data:
        st.error(f"„Éá„Éº„ÇøÂèñÂæóÂ§±Êïó: {symbol} - {interval}")
        return None
    df = pd.DataFrame(data["values"])
    df["datetime"] = pd.to_datetime(df["datetime"])
    df.set_index("datetime", inplace=True)
    df = df.sort_index()
    df = df.astype(float)
    return df

def calc_indicators(df):
    df = df.copy()
    df["SMA_20"] = df["close"].rolling(window=20).mean()
    df["SMA_5"] = df["close"].rolling(window=5).mean()
    df["MACD"] = df["close"].ewm(span=12).mean() - df["close"].ewm(span=26).mean()
    df["Signal"] = df["MACD"].ewm(span=9).mean()
    df["Upper"] = df["close"].rolling(window=20).mean() + 2 * df["close"].rolling(window=20).std()
    df["Lower"] = df["close"].rolling(window=20).mean() - 2 * df["close"].rolling(window=20).std()
    df["RCI"] = df["close"].rank().rolling(window=9).apply(lambda x: np.corrcoef(np.arange(len(x)), x)[0,1], raw=True)
    return df

def extract_signal(df):
    last = df.iloc[-1]
    score = 0
    if last["MACD"] > last["Signal"]:
        score += 1
    if last["SMA_5"] > last["SMA_20"]:
        score += 1
    if last["close"] > last["Upper"]:
        score += 1
    if last["RCI"] > 0.5:
        score += 1
    buy_score = score

    score = 0
    if last["MACD"] < last["Signal"]:
        score += 1
    if last["SMA_5"] < last["SMA_20"]:
        score += 1
    if last["close"] < last["Lower"]:
        score += 1
    if last["RCI"] < -0.5:
        score += 1
    sell_score = score

    if buy_score >= 3:
        return "Ë≤∑„ÅÑ", buy_score
    elif sell_score >= 3:
        return "Â£≤„Çä", sell_score
    else:
        return "ÂæÖ„Å°", max(buy_score, sell_score)

def suggest_trade_plan(price, direction, pip_unit):
    atr = 50 * pip_unit
    if direction == "Ë≤∑„ÅÑ":
        sl = price - atr
        tp = price + atr * 1.6
    elif direction == "Â£≤„Çä":
        sl = price + atr
        tp = price - atr * 1.6
    else:
        return price, price, price, 0
    rr = abs((tp - price) / (sl - price))
    return price, tp, sl, rr

def backtest(df, pip_unit):
    logs = []
    wins = 0
    total = 0
    for i in range(len(df)):
        row = df.iloc[i]
        dt = row.name.strftime("%Y-%m-%d %H:%M")
        signal, score = extract_signal(df.iloc[:i+1])
        price = row["close"]
        entry, tp, sl, rr = suggest_trade_plan(price, signal, pip_unit)
        result = "-"
        pips = 0

        if signal == "Ë≤∑„ÅÑ":
            if i+1 < len(df):
                next_close = df.iloc[i+1]["close"]
                if next_close >= tp:
                    result = "Âà©Á¢∫"
                    pips = (tp - price) / pip_unit
                    wins += 1
                elif next_close <= sl:
                    result = "ÊêçÂàá"
                    pips = (sl - price) / pip_unit
                total += 1
        elif signal == "Â£≤„Çä":
            if i+1 < len(df):
                next_close = df.iloc[i+1]["close"]
                if next_close <= tp:
                    result = "Âà©Á¢∫"
                    pips = (price - tp) / pip_unit
                    wins += 1
                elif next_close >= sl:
                    result = "ÊêçÂàá"
                    pips = (price - sl) / pip_unit
                total += 1

        logs.append({"Êó•ÊôÇ": dt, "ÁµÇÂÄ§": round(price, 3), "Âà§ÂÆö": signal, "„Çπ„Ç≥„Ç¢": score,
                      "ÊåáÂÄ§": round(tp, 3), "ÈÄÜÊåáÂÄ§": round(sl, 3), "ÁµêÊûú": result, "ÊêçÁõä(pips)": int(pips)})

    df_bt = pd.DataFrame(logs)
    win_rate = wins / total * 100 if total > 0 else 0
    total_pips = df_bt["ÊêçÁõä(pips)"].sum()
    return df_bt, win_rate, total_pips

# --- „É°„Ç§„É≥„É≠„Ç∏„ÉÉ„ÇØ ---
if st.button("ÂÆüË°å"):
    tf_map = {
        "„Çπ„Ç≠„É£„É´„Éî„É≥„Ç∞": ["5min", "15min", "1h"],
        "„Éá„Ç§„Éà„É¨„Éº„Éâ": ["15min", "1h", "4h"],
        "„Çπ„Ç§„É≥„Ç∞": ["1h", "4h", "1day"]
    }
    tf_weights = {"5min": 0.2, "15min": 0.3, "1h": 0.3, "4h": 0.3, "1day": 0.4}
    timeframes = tf_map[style]
    pip_unit = get_pip_unit(symbol)

    final_scores = []
    for tf in timeframes:
        df = fetch_data(symbol, tf)
        if df is None: continue
        df = calc_indicators(df)
        signal, score = extract_signal(df)
        st.markdown(f"### ‚è± {tf} Âà§ÂÆöÔºö{signal}Ôºà„Çπ„Ç≥„Ç¢Ôºö{score}Ôºâ")
        final_scores.append(score * tf_weights.get(tf, 0.3))

    avg_score = sum(final_scores)
    decision = "Ë≤∑„ÅÑ" if avg_score >= 2 else "Â£≤„Çä" if avg_score <= 1 else "ÂæÖ„Å°"

    st.subheader("\nüß≠ „Ç®„É≥„Éà„É™„Éº„Ç¨„Ç§„ÉâÔºàÁ∑èÂêàË©ï‰æ°Ôºâ")
    if decision == "Ë≤∑„ÅÑ":
        st.write(f"‚úÖ {style} „Å´„Åä„ÅÑ„Å¶Ë§áÊï∞„ÅÆÊôÇÈñìË∂≥„ÅåË≤∑„ÅÑ„Ç∑„Ç∞„Éä„É´„ÇíÁ§∫„Åó„Å¶„ÅÑ„Åæ„Åô")
        st.write("‚è≥ ‰∏≠Êúü„ÉªÈï∑Êúü„ÅÆ‰∏äÊòá„Éà„É¨„É≥„Éâ„ÅåÁü≠Êúü„Å´„ÇÇÊ≥¢Âèä")
        st.write("üìå Êäº„ÅóÁõÆ„ÅåÂÆå‰∫Ü„Åó„Å¶„Åä„Çä„ÄÅ„Ç®„É≥„Éà„É™„Éº„Çø„Ç§„Éü„É≥„Ç∞„Å®„Åó„Å¶ÊúâÂäπ")
    elif decision == "Â£≤„Çä":
        st.write(f"‚úÖ {style} „Å´„Åä„ÅÑ„Å¶Ë§áÊï∞„ÅÆÊôÇÈñìË∂≥„ÅåÂ£≤„Çä„Ç∑„Ç∞„Éä„É´„ÇíÁ§∫„Åó„Å¶„ÅÑ„Åæ„Åô")
        st.write("‚è≥ ‰∏≠Êúü„ÉªÈï∑Êúü„ÅÆ‰∏ãÈôç„Éà„É¨„É≥„Éâ„ÅåÁü≠Êúü„Å´„ÇÇÊ≥¢Âèä")
        st.write("üìå Êàª„ÇäÂ£≤„Çä„ÅÆ„ÉÅ„É£„É≥„Çπ„ÅåËøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô")
    else:
        st.write("ÁèæÂú®„ÅØÊòéÁ¢∫„Å™Ë≤∑„ÅÑ/Â£≤„Çä„Ç∑„Ç∞„Éä„É´„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ„Ç®„É≥„Éà„É™„Éº„ÅØÊéß„Åà„ÇÅ„Å´")

    df_all = fetch_data(symbol, timeframes[1])
    df_all = calc_indicators(df_all)
    entry = df_all.iloc[-1]["close"]
    entry, tp, sl, rr = suggest_trade_plan(entry, decision, pip_unit)

    bt_log, win_rate, total_pips = backtest(df_all, pip_unit)

    if decision != "ÂæÖ„Å°":
        st.subheader("\nüéØ „Éà„É¨„Éº„Éâ„Éó„É©„É≥ÔºàÊÉ≥ÂÆöÔºâ")
        st.write(f"„Ç®„É≥„Éà„É™„Éº„É¨„Éº„ÉàÔºö{entry:.3f}")
        st.write(f"ÊåáÂÄ§ÔºàÂà©Á¢∫ÔºâÔºö{tp:.3f}Ôºà+{abs(tp-entry)/pip_unit:.0f} pipsÔºâ")
        st.write(f"ÈÄÜÊåáÂÄ§ÔºàÊêçÂàáÔºâÔºö{sl:.3f}Ôºà-{abs(sl-entry)/pip_unit:.0f} pipsÔºâ")
        st.write(f"„É™„Çπ„ÇØ„É™„ÉØ„Éº„ÉâÊØîÔºö{rr:.2f}")
        st.write(f"ÊÉ≥ÂÆöÂãùÁéáÔºö{win_rate:.1f}%")
    else:
        st.subheader("ÁèæÂú®„ÅØ„Ç®„É≥„Éà„É™„ÉºÂæÖ„Å°„Åß„Åô„ÄÇ")

    st.subheader("\nüìä „Éê„ÉÉ„ÇØ„ÉÜ„Çπ„ÉàÁµêÊûúÔºàÊúÄÂ§ß100‰ª∂Ôºâ")
    st.dataframe(bt_log.tail(100), use_container_width=True)
    st.write(f"ÂêàË®àÊêçÁõäÔºö{total_pips:.0f} pips„ÄÄÂãùÁéáÔºö{win_rate:.1f}%ÔºàË≤∑„ÅÑ/Â£≤„Çä„Ç∑„Ç∞„Éä„É´„ÅÆ„ÅøÂØæË±°Ôºâ")
